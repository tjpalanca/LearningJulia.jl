var documenterSearchIndex = {"docs":
[{"location":"dev_env/#Development-Environment","page":"Development Environment","title":"Development Environment","text":"","category":"section"},{"location":"dev_env/","page":"Development Environment","title":"Development Environment","text":"Using: VS Code (coder-server) with Julia Extension","category":"page"},{"location":"dev_env/","page":"Development Environment","title":"Development Environment","text":"I am coming from RStudio so I am very, very spoiled. \nI like VS Code so I decided to set up a cloud-based VS code instance using  the cdr/code-server docker image and layer R, Python, and Julia onto the  image. \nI am using Julia 1.6 as it mainly solves a lot of Time to First  Plot problems which I suspect will cause me issues. \nAfter watching some of the JuliaCon videos on YouTube, I was able to set up the Julia extension with inline results and some cool stuff like workspaces and environments. \nIt feels like RStudio! Although, the Language Server can  sometimes choke up for no apparent reason, and it takes a while for  autocomplete to kick in after loading a package using using.\nSome of the great features are on version control, particularly with the  Git Lens extensions. I can see how more software engineering-types will be  attracted to the Julia ecosystem compared to R which attracts domain  experts going in the opposite direction.\nI'm pretty sure I can find a VS code extension for anything I need; it's an  amazingly rich ecosystem!\nInline results are something else! Much better than a notebook interface and  better than also constantly looking at the console.","category":"page"},{"location":"dataframes/#Data-Frames","page":"Data Frames","title":"Data Frames","text":"","category":"section"},{"location":"dataframes/","page":"Data Frames","title":"Data Frames","text":"I'm mainly coming at this from a Data Science and Backend systems point of view, so data frames are going to be hugely important.","category":"page"},{"location":"orm/#Object-Relational-Mapping","page":"Object-Relational Mapping","title":"Object-Relational Mapping","text":"","category":"section"},{"location":"orm/","page":"Object-Relational Mapping","title":"Object-Relational Mapping","text":"Using: Stipple.jl ","category":"page"},{"location":"ecosystem/#Package-Ecosystem","page":"Ecosystem","title":"Package Ecosystem","text":"","category":"section"},{"location":"ecosystem/","page":"Ecosystem","title":"Ecosystem","text":"I'm spoiled by CRAN. It's a pain to submit and maintain but it does result  in such a good user experience.\nPkg is a great package manager with environments built in! What a relief  as python's venv, conda, etc was difficult to grok.\nI'm seeing that the Pkg registration process is quite general, so now I'm  struggling to find a way to easily gate the quality of packages and the  updated-ness of packages I want to use.","category":"page"},{"location":"ecosystem/","page":"Ecosystem","title":"Ecosystem","text":"","category":"page"},{"location":"databases/#Databases","page":"Databases","title":"Databases","text":"","category":"section"},{"location":"databases/","page":"Databases","title":"Databases","text":"Source: scripts/Database.jl Using: LibPQ.jl, Octo.jl, Stipple.jl","category":"page"},{"location":"databases/","page":"Databases","title":"Databases","text":"My favorite database is PostgreSQL, so I decided to see how I can access this database.\nThere's a standard interface for connecting to databases, but  sadly that doesn't seem to be available for Postgres, instead I'm redirected to the libpq interface LibPQ.jl","category":"page"},{"location":"databases/#LibPQ.jl","page":"Databases","title":"LibPQ.jl","text":"","category":"section"},{"location":"databases/","page":"Databases","title":"Databases","text":"Is there something more high level that I can use? ","category":"page"},{"location":"databases/#Reading","page":"Databases","title":"Reading","text":"","category":"section"},{"location":"databases/","page":"Databases","title":"Databases","text":"With this, I'm able to to make queries and execute them, it's quite low level but it works for my standard Postgres installation.\nI'm able to transpose this into a DataFrame. I don't quite understand the many different tabular structures yet (I'm used to the built-in dataframe  in R), but I can see how that works. See Data Frames.","category":"page"},{"location":"databases/#Writing","page":"Databases","title":"Writing","text":"","category":"section"},{"location":"databases/","page":"Databases","title":"Databases","text":"DDL Statements have to be written manually\nTransactions have to be written manually (but easily wrapped)\nYes I can insert stuff, but still need SQL knowledge","category":"page"},{"location":"databases/#ODBC.jl","page":"Databases","title":"ODBC.jl","text":"","category":"section"},{"location":"databases/","page":"Databases","title":"Databases","text":"This is a more standard interface, but it's less feature rich. I'm skipping  this for now but this might be the way to get to lesser known DBs.","category":"page"},{"location":"databases/#Octo.jl","page":"Databases","title":"Octo.jl","text":"","category":"section"},{"location":"databases/","page":"Databases","title":"Databases","text":"It's a SQL Query DSL in Julia. Amazing, is this going to be like the  {dbplyr} package in R? Making a decent data access layer is soooooo hard!\nOkay so now I have to actually use structs\nIt supports Postgres, and MySQL and SQLite too!\nOkay I was able to query the information schema using a basic query tool.  I'm really not sure why I have to define a struct\nReally these function documentations are a little over my head: for example: Schema.model( will surface CoreType where T or something which does not really give me information about what arguments to place). May just be  that we need to add more docstrings or something?\nSQL keywords in the DSL part need to be capitalized\nI was able to query a bit and get in tune with the DSL, seems ok as a web app backend ORM but not for data analysis.","category":"page"},{"location":"databases/#Query.jl","page":"Databases","title":"Query.jl","text":"","category":"section"},{"location":"databases/","page":"Databases","title":"Databases","text":"The package currently provides working implementations for in-memory data","category":"page"},{"location":"databases/","page":"Databases","title":"Databases","text":"sources, but will eventually be able to translate queries into e.g. SQL. There is a prototype implementation of such a \"query provider\" for SQLite in the package, but it is experimental at this point and only works for a very small subset of queries.","category":"page"},{"location":"databases/","page":"Databases","title":"Databases","text":"This one is super promising but isn't implemented yet.","category":"page"},{"location":"#LearningJulia.jl","page":"Introduction","title":"LearningJulia.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package is just a container for all the code I write while trying to  learn the Julia language.","category":"page"},{"location":"documentation/#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"documentation/","page":"Documentation","title":"Documentation","text":"Using: Documenter.jl","category":"page"},{"location":"documentation/","page":"Documentation","title":"Documentation","text":"I'm interested to see how well we can document stuff, and I'm going to  mainly use the package documentation feature to document my findings during this exploration.\nSeems pretty good so far! I really like the freeformness of the documentation that we can link to docstrings and such. R's documentation system via  {roxygen2} is more restrictive and sometimes requires me to add a lot of  boilerplate. This one feels just right.\nOther packages have very scant package documentation. This is an opportunity to start contributing!","category":"page"}]
}
